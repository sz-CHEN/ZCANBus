cmake_minimum_required(VERSION 3.0)
project(ZCANBus)

set(CMAKE_CXX_STANDARD 11)

# set(USE_PEAK true)

# set(USE_KVASER true)

# set(USE_ZLG true)

# set(USE_ZLG2 true)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(_COMPILER_ARCHITECTURE x64)
endif(CMAKE_SIZEOF_VOID_P EQUAL 8)

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()
set(CAN_FILE CANHandler.cpp)

if(CMAKE_HOST_WIN32)
find_path(Peak_INCLUDE_DIR NAMES PCANBasic.h PATH ${CMAKE_CURRENT_SOURCE_DIR}/include/peak)
find_library(Peak_LIBRARY NAMES PCANBasic PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/MS ${CMAKE_CURRENT_SOURCE_DIR}/lib/x64)
find_path(Kvaser_INCLUDE_DIR canlib.h PATH ${CMAKE_CURRENT_SOURCE_DIR}/include/kvaser)
find_library(Kvaser_LIBRARY NAMES canlib32 PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib/MS ${CMAKE_CURRENT_SOURCE_DIR}/lib/x64)
elseif(CMAKE_HOST_UNIX)
if(CMAKE_HOST_APPLE)
find_path(Peak_INCLUDE_DIR NAMES PCBUSB.h PATH /usr/include /usr/local/include)
find_library(Peak_LIBRARY NAMES PCBUSB PATH /usr/lib /usr/local/lib)
else()
find_path(Peak_INCLUDE_DIR NAMES PCANBasic.h PATH /usr/include /usr/local/include)
find_library(Peak_LIBRARY NAMES pcanbasic PATH /usr/lib /usr/local/lib)
endif(CMAKE_HOST_APPLE)
find_path(Kvaser_INCLUDE_DIR NAMES canlib.h PATH /usr/include /usr/local/include)
find_library(Kvaser_LIBRARY NAMES canlib PATH /usr/lib /usr/local/lib)
find_path(ZLG_INCLUDE_DIR NAMES controlcan.h PATH /usr/include /usr/local/include)
find_library(ZLG_LIBRARY NAMES usbcan PATH /usr/lib /usr/local/lib)
find_path(ZLG2_INCLUDE_DIR NAMES zlgcan.h PATH /usr/include /usr/local/include)
find_library(ZLG2_LIBRARY NAMES usbcan-* PATH /usr/lib /usr/local/lib)
else()
message(FATAL_ERROR "Unsupported OS " ${CMAKE_SYSTEM_NAME})
endif(CMAKE_HOST_WIN32)

if(Peak_INCLUDE_DIR AND Peak_LIBRARY)
set(Peak_FOUND TRUE)
message(STATUS "Found Peak")
else()
if(USE_PEAK)
message(FATAL_ERROR "Not found Peak")
endif()
endif()

if(Kvaser_INCLUDE_DIR AND Kvaser_LIBRARY)
set(Kvaser_FOUND TRUE)
message(STATUS "Found Kvaser")
else()
if(USE_KVASER)
message(FATAL_ERROR "Not found Kvaser")
endif()
endif()

if(ZLG_INCLUDE_DIR AND ZLG_LIBRARY)
set(ZLG_FOUND TRUE)
message(STATUS "Found ZLG")
else()
if(USE_ZLG)
message(FATAL_ERROR "Not found ZLG")
endif()
endif()

if(ZLG2_INCLUDE_DIR AND ZLG2_LIBRARY)
set(ZLG2_FOUND TRUE)
message(STATUS "Found ZLG2")
else()
if(USE_ZLG)
message(FATAL_ERROR "Not found ZLG2")
endif()
endif()

if(Peak_FOUND)
add_definitions(-DUSE_PEAK)
list(APPEND CAN_FILE CANPeak.cpp)
include_directories(${PEAK_INCLUDE_DIR})
link_libraries(${PEAK_LIBRARY})
endif()

if(Kvaser_FOUND)
add_definitions(-DUSE_KVASER)
list(APPEND CAN_FILE CANKvaser.cpp)
include_directories(${Kvaser_INCLUDE_DIR})
link_libraries(${Kvaser_LIBRARY})
endif()

if(ZLG_FOUND)
add_definitions(-DUSE_ZLG)
list(APPEND CAN_FILE CANZLG.cpp)
include_directories(${ZLG_INCLUDE_DIR})
link_libraries(${ZLG_LIBRARY})
endif()

if(ZLG2_FOUND)
add_definitions(-DUSE_ZLG2)
list(APPEND CAN_FILE CANZLG2.cpp)
include_directories(${ZLG2_INCLUDE_DIR})
link_libraries(${ZLG2_LIBRARY})
endif()

if(CMAKE_HOST_UNIX)
  link_libraries(pthread)
endif(CMAKE_HOST_UNIX)

set(CMAKE_DEBUG_POSTFIX _d)
add_library(${PROJECT_NAME} ${CAN_FILE})
